// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.6.1
// source: recentEventsListener.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PlayerRecentEvent, playerRecentEventFromJSON, playerRecentEventToJSON } from "./playerRecentEvent.js";

export const protobufPackage = "recentEventsListener.v1";

export interface RecentEventsListener {
  playerRecentEvents: { [key: string]: PlayerRecentEvents };
}

export interface RecentEventsListener_PlayerRecentEventsEntry {
  key: string;
  value: PlayerRecentEvents | undefined;
}

export interface PlayerRecentEvents {
  playerRecentEvents: PlayerRecentEvent[];
}

function createBaseRecentEventsListener(): RecentEventsListener {
  return { playerRecentEvents: {} };
}

export const RecentEventsListener: MessageFns<RecentEventsListener> = {
  encode(message: RecentEventsListener, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.playerRecentEvents).forEach(([key, value]) => {
      RecentEventsListener_PlayerRecentEventsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecentEventsListener {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecentEventsListener();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = RecentEventsListener_PlayerRecentEventsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.playerRecentEvents[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecentEventsListener {
    return {
      playerRecentEvents: isObject(object.playerRecentEvents)
        ? Object.entries(object.playerRecentEvents).reduce<{ [key: string]: PlayerRecentEvents }>(
          (acc, [key, value]) => {
            acc[key] = PlayerRecentEvents.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: RecentEventsListener): unknown {
    const obj: any = {};
    if (message.playerRecentEvents) {
      const entries = Object.entries(message.playerRecentEvents);
      if (entries.length > 0) {
        obj.playerRecentEvents = {};
        entries.forEach(([k, v]) => {
          obj.playerRecentEvents[k] = PlayerRecentEvents.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecentEventsListener>, I>>(base?: I): RecentEventsListener {
    return RecentEventsListener.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecentEventsListener>, I>>(object: I): RecentEventsListener {
    const message = createBaseRecentEventsListener();
    message.playerRecentEvents = Object.entries(object.playerRecentEvents ?? {}).reduce<
      { [key: string]: PlayerRecentEvents }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = PlayerRecentEvents.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseRecentEventsListener_PlayerRecentEventsEntry(): RecentEventsListener_PlayerRecentEventsEntry {
  return { key: "", value: undefined };
}

export const RecentEventsListener_PlayerRecentEventsEntry: MessageFns<RecentEventsListener_PlayerRecentEventsEntry> = {
  encode(
    message: RecentEventsListener_PlayerRecentEventsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      PlayerRecentEvents.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecentEventsListener_PlayerRecentEventsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecentEventsListener_PlayerRecentEventsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = PlayerRecentEvents.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecentEventsListener_PlayerRecentEventsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? PlayerRecentEvents.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: RecentEventsListener_PlayerRecentEventsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = PlayerRecentEvents.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecentEventsListener_PlayerRecentEventsEntry>, I>>(
    base?: I,
  ): RecentEventsListener_PlayerRecentEventsEntry {
    return RecentEventsListener_PlayerRecentEventsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecentEventsListener_PlayerRecentEventsEntry>, I>>(
    object: I,
  ): RecentEventsListener_PlayerRecentEventsEntry {
    const message = createBaseRecentEventsListener_PlayerRecentEventsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? PlayerRecentEvents.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBasePlayerRecentEvents(): PlayerRecentEvents {
  return { playerRecentEvents: [] };
}

export const PlayerRecentEvents: MessageFns<PlayerRecentEvents> = {
  encode(message: PlayerRecentEvents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.playerRecentEvents) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerRecentEvents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerRecentEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.playerRecentEvents.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.playerRecentEvents.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerRecentEvents {
    return {
      playerRecentEvents: globalThis.Array.isArray(object?.playerRecentEvents)
        ? object.playerRecentEvents.map((e: any) => playerRecentEventFromJSON(e))
        : [],
    };
  },

  toJSON(message: PlayerRecentEvents): unknown {
    const obj: any = {};
    if (message.playerRecentEvents?.length) {
      obj.playerRecentEvents = message.playerRecentEvents.map((e) => playerRecentEventToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerRecentEvents>, I>>(base?: I): PlayerRecentEvents {
    return PlayerRecentEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerRecentEvents>, I>>(object: I): PlayerRecentEvents {
    const message = createBasePlayerRecentEvents();
    message.playerRecentEvents = object.playerRecentEvents?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
