// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.6.1
// source: groups/enemyGroup.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Enemy } from "../enemy/enemy.js";
import { Position } from "../utils/position.js";

export const protobufPackage = "enemyGroup.v1";

export interface EnemyGroup {
  enemies: Enemy[];
  timeUntilNextHorde: number;
  spawnPoints: Position[];
}

function createBaseEnemyGroup(): EnemyGroup {
  return { enemies: [], timeUntilNextHorde: 0, spawnPoints: [] };
}

export const EnemyGroup: MessageFns<EnemyGroup> = {
  encode(message: EnemyGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.enemies) {
      Enemy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.timeUntilNextHorde !== 0) {
      writer.uint32(16).uint32(message.timeUntilNextHorde);
    }
    for (const v of message.spawnPoints) {
      Position.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnemyGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnemyGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.enemies.push(Enemy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.timeUntilNextHorde = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.spawnPoints.push(Position.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnemyGroup {
    return {
      enemies: globalThis.Array.isArray(object?.enemies) ? object.enemies.map((e: any) => Enemy.fromJSON(e)) : [],
      timeUntilNextHorde: isSet(object.timeUntilNextHorde) ? globalThis.Number(object.timeUntilNextHorde) : 0,
      spawnPoints: globalThis.Array.isArray(object?.spawnPoints)
        ? object.spawnPoints.map((e: any) => Position.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EnemyGroup): unknown {
    const obj: any = {};
    if (message.enemies?.length) {
      obj.enemies = message.enemies.map((e) => Enemy.toJSON(e));
    }
    if (message.timeUntilNextHorde !== 0) {
      obj.timeUntilNextHorde = Math.round(message.timeUntilNextHorde);
    }
    if (message.spawnPoints?.length) {
      obj.spawnPoints = message.spawnPoints.map((e) => Position.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnemyGroup>, I>>(base?: I): EnemyGroup {
    return EnemyGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnemyGroup>, I>>(object: I): EnemyGroup {
    const message = createBaseEnemyGroup();
    message.enemies = object.enemies?.map((e) => Enemy.fromPartial(e)) || [];
    message.timeUntilNextHorde = object.timeUntilNextHorde ?? 0;
    message.spawnPoints = object.spawnPoints?.map((e) => Position.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
