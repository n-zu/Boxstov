// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.6.1
// source: utils/direction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "direction.v1";

export enum DirectionEnum {
  Up = 0,
  Down = 1,
  Left = 2,
  Right = 3,
  UpLeft = 4,
  UpRight = 5,
  DownLeft = 6,
  DownRight = 7,
  UNRECOGNIZED = -1,
}

export function directionEnumFromJSON(object: any): DirectionEnum {
  switch (object) {
    case 0:
    case "Up":
      return DirectionEnum.Up;
    case 1:
    case "Down":
      return DirectionEnum.Down;
    case 2:
    case "Left":
      return DirectionEnum.Left;
    case 3:
    case "Right":
      return DirectionEnum.Right;
    case 4:
    case "UpLeft":
      return DirectionEnum.UpLeft;
    case 5:
    case "UpRight":
      return DirectionEnum.UpRight;
    case 6:
    case "DownLeft":
      return DirectionEnum.DownLeft;
    case 7:
    case "DownRight":
      return DirectionEnum.DownRight;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DirectionEnum.UNRECOGNIZED;
  }
}

export function directionEnumToJSON(object: DirectionEnum): string {
  switch (object) {
    case DirectionEnum.Up:
      return "Up";
    case DirectionEnum.Down:
      return "Down";
    case DirectionEnum.Left:
      return "Left";
    case DirectionEnum.Right:
      return "Right";
    case DirectionEnum.UpLeft:
      return "UpLeft";
    case DirectionEnum.UpRight:
      return "UpRight";
    case DirectionEnum.DownLeft:
      return "DownLeft";
    case DirectionEnum.DownRight:
      return "DownRight";
    case DirectionEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Direction {
  direction: DirectionEnum;
}

function createBaseDirection(): Direction {
  return { direction: 0 };
}

export const Direction: MessageFns<Direction> = {
  encode(message: Direction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.direction !== 0) {
      writer.uint32(8).int32(message.direction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Direction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Direction {
    return { direction: isSet(object.direction) ? directionEnumFromJSON(object.direction) : 0 };
  },

  toJSON(message: Direction): unknown {
    const obj: any = {};
    if (message.direction !== 0) {
      obj.direction = directionEnumToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Direction>, I>>(base?: I): Direction {
    return Direction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Direction>, I>>(object: I): Direction {
    const message = createBaseDirection();
    message.direction = object.direction ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
