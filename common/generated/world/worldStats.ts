// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.6.1
// source: world/worldStats.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "worldStats.v1";

export interface WorldStats {
  rage: number;
  kills: number;
  killsPerPlayer: { [key: string]: number };
}

export interface WorldStats_KillsPerPlayerEntry {
  key: string;
  value: number;
}

function createBaseWorldStats(): WorldStats {
  return { rage: 0, kills: 0, killsPerPlayer: {} };
}

export const WorldStats: MessageFns<WorldStats> = {
  encode(message: WorldStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rage !== 0) {
      writer.uint32(13).float(message.rage);
    }
    if (message.kills !== 0) {
      writer.uint32(16).uint32(message.kills);
    }
    Object.entries(message.killsPerPlayer).forEach(([key, value]) => {
      WorldStats_KillsPerPlayerEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorldStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorldStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.rage = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.kills = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = WorldStats_KillsPerPlayerEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.killsPerPlayer[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorldStats {
    return {
      rage: isSet(object.rage) ? globalThis.Number(object.rage) : 0,
      kills: isSet(object.kills) ? globalThis.Number(object.kills) : 0,
      killsPerPlayer: isObject(object.killsPerPlayer)
        ? Object.entries(object.killsPerPlayer).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: WorldStats): unknown {
    const obj: any = {};
    if (message.rage !== 0) {
      obj.rage = message.rage;
    }
    if (message.kills !== 0) {
      obj.kills = Math.round(message.kills);
    }
    if (message.killsPerPlayer) {
      const entries = Object.entries(message.killsPerPlayer);
      if (entries.length > 0) {
        obj.killsPerPlayer = {};
        entries.forEach(([k, v]) => {
          obj.killsPerPlayer[k] = Math.round(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorldStats>, I>>(base?: I): WorldStats {
    return WorldStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorldStats>, I>>(object: I): WorldStats {
    const message = createBaseWorldStats();
    message.rage = object.rage ?? 0;
    message.kills = object.kills ?? 0;
    message.killsPerPlayer = Object.entries(object.killsPerPlayer ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseWorldStats_KillsPerPlayerEntry(): WorldStats_KillsPerPlayerEntry {
  return { key: "", value: 0 };
}

export const WorldStats_KillsPerPlayerEntry: MessageFns<WorldStats_KillsPerPlayerEntry> = {
  encode(message: WorldStats_KillsPerPlayerEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorldStats_KillsPerPlayerEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorldStats_KillsPerPlayerEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorldStats_KillsPerPlayerEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: WorldStats_KillsPerPlayerEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorldStats_KillsPerPlayerEntry>, I>>(base?: I): WorldStats_KillsPerPlayerEntry {
    return WorldStats_KillsPerPlayerEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorldStats_KillsPerPlayerEntry>, I>>(
    object: I,
  ): WorldStats_KillsPerPlayerEntry {
    const message = createBaseWorldStats_KillsPerPlayerEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
