// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.6.1
// source: world/world.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BulletGroup } from "../groups/bulletGroup.js";
import { EnemyGroup } from "../groups/enemyGroup.js";
import { Player } from "../player/player.js";
import { RecentEventsListener } from "../recentEventsListener.js";
import { WorldStats } from "./worldStats.js";

export const protobufPackage = "world.v1.js";

export interface World {
  players: Player[];
  bullets: BulletGroup | undefined;
  enemies: EnemyGroup | undefined;
  stats: WorldStats | undefined;
  recentEvents: RecentEventsListener | undefined;
}

function createBaseWorld(): World {
  return { players: [], bullets: undefined, enemies: undefined, stats: undefined, recentEvents: undefined };
}

export const World: MessageFns<World> = {
  encode(message: World, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.players) {
      Player.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.bullets !== undefined) {
      BulletGroup.encode(message.bullets, writer.uint32(18).fork()).join();
    }
    if (message.enemies !== undefined) {
      EnemyGroup.encode(message.enemies, writer.uint32(26).fork()).join();
    }
    if (message.stats !== undefined) {
      WorldStats.encode(message.stats, writer.uint32(34).fork()).join();
    }
    if (message.recentEvents !== undefined) {
      RecentEventsListener.encode(message.recentEvents, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): World {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorld();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.players.push(Player.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bullets = BulletGroup.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.enemies = EnemyGroup.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.stats = WorldStats.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.recentEvents = RecentEventsListener.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): World {
    return {
      players: globalThis.Array.isArray(object?.players) ? object.players.map((e: any) => Player.fromJSON(e)) : [],
      bullets: isSet(object.bullets) ? BulletGroup.fromJSON(object.bullets) : undefined,
      enemies: isSet(object.enemies) ? EnemyGroup.fromJSON(object.enemies) : undefined,
      stats: isSet(object.stats) ? WorldStats.fromJSON(object.stats) : undefined,
      recentEvents: isSet(object.recentEvents) ? RecentEventsListener.fromJSON(object.recentEvents) : undefined,
    };
  },

  toJSON(message: World): unknown {
    const obj: any = {};
    if (message.players?.length) {
      obj.players = message.players.map((e) => Player.toJSON(e));
    }
    if (message.bullets !== undefined) {
      obj.bullets = BulletGroup.toJSON(message.bullets);
    }
    if (message.enemies !== undefined) {
      obj.enemies = EnemyGroup.toJSON(message.enemies);
    }
    if (message.stats !== undefined) {
      obj.stats = WorldStats.toJSON(message.stats);
    }
    if (message.recentEvents !== undefined) {
      obj.recentEvents = RecentEventsListener.toJSON(message.recentEvents);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<World>, I>>(base?: I): World {
    return World.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<World>, I>>(object: I): World {
    const message = createBaseWorld();
    message.players = object.players?.map((e) => Player.fromPartial(e)) || [];
    message.bullets = (object.bullets !== undefined && object.bullets !== null)
      ? BulletGroup.fromPartial(object.bullets)
      : undefined;
    message.enemies = (object.enemies !== undefined && object.enemies !== null)
      ? EnemyGroup.fromPartial(object.enemies)
      : undefined;
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? WorldStats.fromPartial(object.stats)
      : undefined;
    message.recentEvents = (object.recentEvents !== undefined && object.recentEvents !== null)
      ? RecentEventsListener.fromPartial(object.recentEvents)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
