// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.6.1
// source: player/player.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DirectionEnum, directionEnumFromJSON, directionEnumToJSON } from "../utils/direction.js";
import { Position } from "../utils/position.js";
import { PlayerArsenal } from "./playerArsenal.js";

export const protobufPackage = "player.v1";

export interface Player {
  id: string;
  position: Position | undefined;
  facing: DirectionEnum;
  idle: boolean;
  health: number;
  arsenal: PlayerArsenal | undefined;
}

function createBasePlayer(): Player {
  return { id: "", position: undefined, facing: 0, idle: false, health: 0, arsenal: undefined };
}

export const Player: MessageFns<Player> = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(18).fork()).join();
    }
    if (message.facing !== 0) {
      writer.uint32(24).int32(message.facing);
    }
    if (message.idle !== false) {
      writer.uint32(32).bool(message.idle);
    }
    if (message.health !== 0) {
      writer.uint32(45).float(message.health);
    }
    if (message.arsenal !== undefined) {
      PlayerArsenal.encode(message.arsenal, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.facing = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.idle = reader.bool();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.health = reader.float();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.arsenal = PlayerArsenal.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
      facing: isSet(object.facing) ? directionEnumFromJSON(object.facing) : 0,
      idle: isSet(object.idle) ? globalThis.Boolean(object.idle) : false,
      health: isSet(object.health) ? globalThis.Number(object.health) : 0,
      arsenal: isSet(object.arsenal) ? PlayerArsenal.fromJSON(object.arsenal) : undefined,
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    if (message.facing !== 0) {
      obj.facing = directionEnumToJSON(message.facing);
    }
    if (message.idle !== false) {
      obj.idle = message.idle;
    }
    if (message.health !== 0) {
      obj.health = message.health;
    }
    if (message.arsenal !== undefined) {
      obj.arsenal = PlayerArsenal.toJSON(message.arsenal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.id = object.id ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    message.facing = object.facing ?? 0;
    message.idle = object.idle ?? false;
    message.health = object.health ?? 0;
    message.arsenal = (object.arsenal !== undefined && object.arsenal !== null)
      ? PlayerArsenal.fromPartial(object.arsenal)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
