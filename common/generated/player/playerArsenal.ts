// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.6.1
// source: player/playerArsenal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "playerArsenal.v1";

export enum GunType {
  Rifle = 0,
  Shotgun = 1,
  Rpg = 2,
  UNRECOGNIZED = -1,
}

export function gunTypeFromJSON(object: any): GunType {
  switch (object) {
    case 0:
    case "Rifle":
      return GunType.Rifle;
    case 1:
    case "Shotgun":
      return GunType.Shotgun;
    case 2:
    case "Rpg":
      return GunType.Rpg;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GunType.UNRECOGNIZED;
  }
}

export function gunTypeToJSON(object: GunType): string {
  switch (object) {
    case GunType.Rifle:
      return "Rifle";
    case GunType.Shotgun:
      return "Shotgun";
    case GunType.Rpg:
      return "Rpg";
    case GunType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PlayerArsenal {
  currentGun: GunType;
  kills: number;
}

function createBasePlayerArsenal(): PlayerArsenal {
  return { currentGun: 0, kills: 0 };
}

export const PlayerArsenal: MessageFns<PlayerArsenal> = {
  encode(message: PlayerArsenal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentGun !== 0) {
      writer.uint32(8).int32(message.currentGun);
    }
    if (message.kills !== 0) {
      writer.uint32(16).uint32(message.kills);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerArsenal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerArsenal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.currentGun = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.kills = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerArsenal {
    return {
      currentGun: isSet(object.currentGun) ? gunTypeFromJSON(object.currentGun) : 0,
      kills: isSet(object.kills) ? globalThis.Number(object.kills) : 0,
    };
  },

  toJSON(message: PlayerArsenal): unknown {
    const obj: any = {};
    if (message.currentGun !== 0) {
      obj.currentGun = gunTypeToJSON(message.currentGun);
    }
    if (message.kills !== 0) {
      obj.kills = Math.round(message.kills);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerArsenal>, I>>(base?: I): PlayerArsenal {
    return PlayerArsenal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerArsenal>, I>>(object: I): PlayerArsenal {
    const message = createBasePlayerArsenal();
    message.currentGun = object.currentGun ?? 0;
    message.kills = object.kills ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
