/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var utils_position_pb = require('../utils/position_pb.js');
var utils_direction_pb = require('../utils/direction_pb.js');
var player_playerArsenal_pb = require('../player/playerArsenal_pb.js');
goog.exportSymbol('proto.player.v1.Player', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.player.v1.Player.displayName = 'proto.player.v1.Player';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    position: (f = msg.getPosition()) && utils_position_pb.Position.toObject(includeInstance, f),
    facing: jspb.Message.getFieldWithDefault(msg, 3, 0),
    idle: jspb.Message.getFieldWithDefault(msg, 4, false),
    health: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    arsenal: (f = msg.getArsenal()) && player_playerArsenal_pb.PlayerArsenal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Player}
 */
proto.player.v1.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Player;
  return proto.player.v1.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Player}
 */
proto.player.v1.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new utils_position_pb.Position;
      reader.readMessage(value,utils_position_pb.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {!proto.direction.v1.DirectionEnum} */ (reader.readEnum());
      msg.setFacing(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealth(value);
      break;
    case 6:
      var value = new player_playerArsenal_pb.PlayerArsenal;
      reader.readMessage(value,player_playerArsenal_pb.PlayerArsenal.deserializeBinaryFromReader);
      msg.setArsenal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      utils_position_pb.Position.serializeBinaryToWriter
    );
  }
  f = message.getFacing();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIdle();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHealth();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getArsenal();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      player_playerArsenal_pb.PlayerArsenal.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.player.v1.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.player.v1.Player.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional position.v1.Position position = 2;
 * @return {?proto.position.v1.Position}
 */
proto.player.v1.Player.prototype.getPosition = function() {
  return /** @type{?proto.position.v1.Position} */ (
    jspb.Message.getWrapperField(this, utils_position_pb.Position, 2));
};


/** @param {?proto.position.v1.Position|undefined} value */
proto.player.v1.Player.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.player.v1.Player.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.player.v1.Player.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional direction.v1.DirectionEnum facing = 3;
 * @return {!proto.direction.v1.DirectionEnum}
 */
proto.player.v1.Player.prototype.getFacing = function() {
  return /** @type {!proto.direction.v1.DirectionEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.direction.v1.DirectionEnum} value */
proto.player.v1.Player.prototype.setFacing = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool idle = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.player.v1.Player.prototype.getIdle = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.player.v1.Player.prototype.setIdle = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional float health = 5;
 * @return {number}
 */
proto.player.v1.Player.prototype.getHealth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.player.v1.Player.prototype.setHealth = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional playerArsenal.v1.PlayerArsenal arsenal = 6;
 * @return {?proto.playerArsenal.v1.PlayerArsenal}
 */
proto.player.v1.Player.prototype.getArsenal = function() {
  return /** @type{?proto.playerArsenal.v1.PlayerArsenal} */ (
    jspb.Message.getWrapperField(this, player_playerArsenal_pb.PlayerArsenal, 6));
};


/** @param {?proto.playerArsenal.v1.PlayerArsenal|undefined} value */
proto.player.v1.Player.prototype.setArsenal = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.player.v1.Player.prototype.clearArsenal = function() {
  this.setArsenal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.player.v1.Player.prototype.hasArsenal = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.player.v1);
