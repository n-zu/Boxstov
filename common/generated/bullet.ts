// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.6.1
// source: bullet.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GunType, gunTypeFromJSON, gunTypeToJSON } from "./player/playerArsenal.js";
import { Position } from "./utils/position.js";

export const protobufPackage = "bullet.v1";

export interface Bullet {
  position: Position | undefined;
  rotation: number;
  active: boolean;
  visible: boolean;
  origin: GunType;
}

function createBaseBullet(): Bullet {
  return { position: undefined, rotation: 0, active: false, visible: false, origin: 0 };
}

export const Bullet: MessageFns<Bullet> = {
  encode(message: Bullet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(10).fork()).join();
    }
    if (message.rotation !== 0) {
      writer.uint32(21).float(message.rotation);
    }
    if (message.active !== false) {
      writer.uint32(24).bool(message.active);
    }
    if (message.visible !== false) {
      writer.uint32(32).bool(message.visible);
    }
    if (message.origin !== 0) {
      writer.uint32(40).int32(message.origin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Bullet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBullet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.rotation = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.active = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.origin = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Bullet {
    return {
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      visible: isSet(object.visible) ? globalThis.Boolean(object.visible) : false,
      origin: isSet(object.origin) ? gunTypeFromJSON(object.origin) : 0,
    };
  },

  toJSON(message: Bullet): unknown {
    const obj: any = {};
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    if (message.rotation !== 0) {
      obj.rotation = message.rotation;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.visible !== false) {
      obj.visible = message.visible;
    }
    if (message.origin !== 0) {
      obj.origin = gunTypeToJSON(message.origin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Bullet>, I>>(base?: I): Bullet {
    return Bullet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Bullet>, I>>(object: I): Bullet {
    const message = createBaseBullet();
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    message.rotation = object.rotation ?? 0;
    message.active = object.active ?? false;
    message.visible = object.visible ?? false;
    message.origin = object.origin ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
